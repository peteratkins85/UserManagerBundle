<?php

namespace Oni\UserManagerBundle\Entity\Repository;

use Oni\CoreBundle\CoreBundle;
use Oni\CoreBundle\CoreGlobals;
use Oni\ProductManagerBundle\ProductEvents;
use Doctrine\ORM\EntityRepository;


use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    private $table = CoreGlobals::USERS_ENTITY;

    public function findByUsername($username){

        if (empty($username)){ return false; }

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('u')
            ->from($this->table, 'u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->setMaxResults(1);

        $results = $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        //expecting only one result so set the result to the first array element
        $results = isset($results[0]) ? $results[0] : false;

        return $results;

    }

    /**
     *
     * Get all users with field titles
     *
     * @param bool $offset
     * @param bool $maxResults
     *
     * @return array
     */
    public function getAllUsersAsArray($offset = false, $maxResults = false){

        
        $results = array();

        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                   ->select('u')
                   ->from($this->table, 'u');

        if ($offset > 0){
            $queryBuilder->setFirstResult($offset);
        }
        If ($maxResults > 0){
            $queryBuilder->setMaxResults($maxResults);
        }

        $query = $queryBuilder->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        //$results = new Paginator($query, $fetchJoinCollection = true);

        $results = $query->getResult();


        return $results;

    }

}
