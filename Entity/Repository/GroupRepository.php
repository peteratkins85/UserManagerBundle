<?php

namespace App\Oni\UserManagerBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends EntityRepository
{

	/** @var ContainerInterface $container **/
	public $container;

	/** @var  TranslatorInterface */
	protected $translator;

	protected $table = 'UserManagerBundle:Group';

	/**
	 *
	 * Get all With translation fallback
	 *
	 * @param array|integer $exclude
	 * @return object
	 *
	 */
	public function findAllWithTranslationFallBack(){


		$q = $this->getEntityManager()->createQueryBuilder();
		$qb = $this->getEntityManager()->createQueryBuilder()
		           ->select('g')
		           ->from($this->table, 'g');

		
		$query = $qb->getQuery()->setHint(
			\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
			'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
		);
		$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);
		$groups = $query->getResult();


		return $groups;

	}


	/**
	 *
	 * Get all groups where current user access level is less or equal to group access level
	 *
	 * @param integer $accessLevel
	 * @return array
	 *
	 */
	public function findGroupsWhereAccessLevelIsLessThan($accessLevel){


		$queryBuilder = $this->getEntityManager()->createQueryBuilder()
			->select('g')
			->from($this->table, 'g')
			->where('g.accessLevel <= ?1')
			->setParameter(1, $accessLevel);

		$query = $queryBuilder->getQuery()->setHint(
			\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
			'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
		);

		$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);
		$groups = $query->getResult();


		return $groups;

	}

}
